name: Python 多系统自动构建与发布

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  check-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.12" ]  

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: 代码风格检查 (flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics



  build-artifacts:
    needs: check-and-test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux
            executable-name: xmut-admission-linux
          - os: windows-latest
            artifact-name: windows
            executable-name: xmut-admission-windows.exe
          - os: macos-latest
            artifact-name: macos
            executable-name: xmut-admission-macos

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  
          cache: 'pip'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 打包源代码（仅在Linux上执行）
      - name: 打包源代码
        if: matrix.os == 'ubuntu-latest'
        run: |
          zip -r "xmut-admission-source-${{ github.ref_name }}.zip" \
            main.py util/ README.md requirements.txt
          # 确保文件存在
          ls -l xmut-admission-source-${{ github.ref_name }}.zip

      # 构建可执行文件
      - name: 构建可执行文件
        run: |
          $versionedName = "${{ matrix.executable-name }}-${{ github.ref_name }}"
          pyinstaller --onefile --name "$versionedName" main.py
          
          # 跨平台移动文件
          $outputPath = if ('${{ matrix.os }}' -eq 'windows-latest') {
            "dist\$versionedName.exe"
          } else {
            "dist/$versionedName"
          }
          mv $outputPath .
          
          # 验证文件是否移动成功
          ls -l $versionedName*
        shell: pwsh

      # 上传构建产物（明确指定文件，避免路径问题）
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}-artifacts
          path: |
            xmut-admission-*-${{ github.ref_name }}*
            ${{ (matrix.os == 'ubuntu-latest') && format('xmut-admission-source-{0}.zip', github.ref_name) || '' }}


  create-release:
    needs: build-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 查看下载的文件结构（用于调试）
      - name: 显示下载的产物结构
        run: |
          echo "产物目录结构："
          tree artifacts

      # 整理发布文件
      - name: 整理发布文件
        run: |
          mkdir -p release-files
          
          # 复制Linux可执行文件
          cp artifacts/linux-artifacts/xmut-admission-linux-* release-files/
          
          # 复制Windows可执行文件
          cp artifacts/windows-artifacts/xmut-admission-windows-*.exe release-files/
          
          # 复制macOS可执行文件
          cp artifacts/macos-artifacts/xmut-admission-macos-* release-files/
          
          # 复制源代码包
          cp artifacts/linux-artifacts/xmut-admission-source-*.zip release-files/ || echo "源代码包已复制或不存在"
          
          # 查看整理结果
          ls -l release-files

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          title: "厦门理工学院录取查询工具 ${{ github.ref_name }}"
          body: |
            厦门理工学院录取查询工具 ${{ github.ref_name }} 版本发布
            
            支持系统：
            - Linux
            - Windows
            - macOS
          files: |
            release-files/*
          draft: false
          prerelease: false
